diff --git a/modules/membership/includes/Admin/Services/Paypal/PaypalService.php b/modules/membership/includes/Admin/Services/Paypal/PaypalService.php
index 97e956a2..bdf19b2b 100644
--- a/modules/membership/includes/Admin/Services/Paypal/PaypalService.php
+++ b/modules/membership/includes/Admin/Services/Paypal/PaypalService.php
@@ -576,6 +576,75 @@ class PaypalService {
 			'message' => $message,
 		);
 	}
+	/**
+	 * Reactivates already cancelled subscription.
+	 * @param $subscription_id Subscription Id.
+	 */
+	public function reactivate_subscription( $subscription_id ) {
+		$paypal_options['mode']          = get_option( 'user_registration_global_paypal_mode', 'test' );
+		$paypal_options['client_id']     = get_option( 'user_registration_global_paypal_client_id', '' );
+		$paypal_options['client_secret'] = get_option( 'user_registration_global_paypal_client_secret', '' );
+		$client_id     = $paypal_options['client_id'];
+		$client_secret = $paypal_options['client_secret'];
+		$url           = ( 'production' === $paypal_options['mode'] ) ? 'https://api-m.paypal.com/' : 'https://api-m.sandbox.paypal.com/';
+
+		$login_request = self::login_paypal( $url, $client_id, $client_secret );
+
+		if( 200 !== $login_request[ 'status_code' ] ) {
+			$message = esc_html__( 'Invalid response from paypal, check Client ID or Secret.', 'user-registration' );
+			ur_get_logger()->notice( $message, array( 'source' => 'ur-membership-paypal' ) );
+
+			return array(
+				'status'  => false,
+				'message' => $message,
+			);
+		}
+		$url .= sprintf( 'v1/billing/subscriptions/%s/activate', $subscription_id );
+
+		$bearerToken = $login_request['access_token'];
+
+		$headers = array(
+			'Content-Type: application/json',
+			'Accept: application/json',
+			'Authorization: Bearer ' . $bearerToken,
+		);
+		$data = json_encode( array(
+			'reason' => 'User initiated reactivation'
+		) );
+		$ch      = curl_init();
+		curl_setopt( $ch, CURLOPT_URL, $url );
+		curl_setopt( $ch, CURLOPT_POST, true );
+		curl_setopt( $ch, CURLOPT_HTTPHEADER, $headers );
+		curl_setopt( $ch, CURLOPT_POSTFIELDS, $data );
+		curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
+
+		$response = curl_exec( $ch );
+		$result   = json_decode( $response );
+
+		$status_code = curl_getinfo( $ch, CURLINFO_HTTP_CODE );
+
+		if ( curl_errno( $ch ) ) {
+			ur_get_logger()->notice( curl_error( $ch ), array( 'source' => 'ur-membership-paypal' ) );
+		}
+		curl_close( $ch );
+		ur_get_logger()->notice( 'Paypal Response Status Code: ' . $status_code, array( 'source' => 'ur-membership-paypal' ) );
+
+		if ( 204 === $status_code ) {
+			$message = esc_html__( 'Subscription successfully reactivated from paypal.', 'user-registration' );
+			ur_get_logger()->notice( $message, array( 'source' => 'ur-membership-paypal' ) );
+
+			return array(
+				'status' => true,
+			);
+		}
+		$message = esc_html__( 'Subscription reactivation failed from Paypal.', 'user-registration' );
+		ur_get_logger()->notice( $message, array( 'source' => 'ur-membership-paypal' ) );
+
+		return array(
+			'status'  => false,
+			'message' => $message,
+		);
+	}
 
 	/**
 	 * validate_ipn
diff --git a/modules/membership/includes/Admin/Services/Stripe/StripeService.php b/modules/membership/includes/Admin/Services/Stripe/StripeService.php
index e3b5ef6b..bcc213cc 100644
--- a/modules/membership/includes/Admin/Services/Stripe/StripeService.php
+++ b/modules/membership/includes/Admin/Services/Stripe/StripeService.php
@@ -580,7 +580,11 @@ class StripeService {
 		}
 
 		$subscription = \Stripe\Subscription::retrieve( $subscription['subscription_id'] );
-		$deleted_sub  = $subscription->cancel();
+		// $deleted_sub  = $subscription->cancel();
+		$deleted_sub = \Stripe\Subscription::update(
+			$subscription['subscription_id'],
+			[ 'cancel_at_period_end' => true ],
+		);
 		if ( '' !== $deleted_sub['canceled_at'] ) {
 			$response['status'] = true;
 		}
@@ -589,6 +593,49 @@ class StripeService {
 
 		return $response;
 	}
+	/**
+	 * Reactivates stripe subscription if it has been soft cancelled.
+	 * 
+	 * @param $subscription_id Stripe's Subscription Id.
+	 * 
+	 * @return $response array Response with status flag and message.
+	 */
+	public function reactivate_subscription( $subscription_id ) {
+		$response = array(
+			'status' => false,
+		);
+		$subscription = \Stripe\Subscription::retrieve( $subscription_id );
+		if( isset( $subscription->id ) ) {
+			if( 'active' === $subscription->status ) {
+				return array(
+					'status' => true,
+					'message' => __( 'Subscription reactivated successfully.', 'user-registration' ),
+				);
+			}
+			elseif( 'canceled' !== $subscription->status && true === $subscription->cancel_at_period_end ) {
+				$subscription = \Stripe\Subscription::update(
+					$subscription_id, 
+					[ 'cancel_at_period_end' => false, ]
+				);
+				return array(
+					'status' => true,
+					'message' => __( 'Subscription reactivated successfully.', 'user-registration' ),
+				);
+			}
+			else {
+				ur_get_logger()->info( sprintf( 'Subscription %s with status %s is not reactivable in stripe end.', $subscription->status , $subscription_id ),  );
+			}
+		} else {
+			ur_get_logger()->info( sprintf( 'Subscription %s not found in stripe end.', $subscription_id ), 'ur-membership-stripe' );
+			wp_send_json_error(
+				array(
+					'message' => __( 'Error reactivating the stripe subscription.', 'user-registration' ),
+				)
+			);
+		}
+
+		return $response;
+	}
 
 	public function handle_webhook( $event, $subscription_id ) {
 		switch ( $event['type'] ) {
